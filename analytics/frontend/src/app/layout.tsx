"use client";

//import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { useEffect, useState } from "react";
import { IntlProvider } from "next-intl";
import enMessages from "../locales/en.json";
import itMessages from "../locales/it.json";
import React from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

//export const metadata: Metadata = {
  //title: "Create Next App",
  //description: "Generated by create next app",
//};

type RootLayoutProps = {
  children: React.ReactNode;
};

export default function RootLayout({ children }: RootLayoutProps) {
  const [locale, setLocale] = useState("en");

  useEffect(() => {
    // Get the selected language from localStorage (set by Django)
    const savedLang = localStorage.getItem("language") || "en";
    setLocale(savedLang);

    // Listen for language change event from Django's language switcher
    const handleLanguageChange = () => {
      const newLang = localStorage.getItem("language") || "en";
      setLocale(newLang);
    };

    window.addEventListener("languageChange", handleLanguageChange);

    return () => {
      window.removeEventListener("languageChange", handleLanguageChange);
    };
  }, []);

  // Select translation messages based on the language
  const messages = locale === "it" ? itMessages : enMessages; // Fixed Italian reference

  return (
    <html lang={locale}>
      <body>
        <IntlProvider locale={locale} messages={messages}>
          {children}
        </IntlProvider>
      </body>
    </html>
  );
}